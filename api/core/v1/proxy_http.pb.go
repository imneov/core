// Code generated by protoc-gen-go-http. DO NOT EDIT.
// versions:
// protoc-gen-go-http 0.1.0

package v1

import (
	context "context"
	"io/ioutil"
	http "net/http"
	reflect "reflect"
	"strings"

	go_restful "github.com/emicklei/go-restful"
	errors "github.com/tkeel-io/kit/errors"
	emptypb "google.golang.org/protobuf/types/known/emptypb"

	transportHTTP "github.com/tkeel-io/kit/transport/http"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the tkeel package it is being compiled against.
// import package.context.http.reflect.go_restful.json.errors.emptypb.

type ProxyHTTPServer interface {
	Respond(context.Context, *RespondRequest) (*RespondResponse, error)
}

type ProxyHTTPHandler struct {
	srv ProxyHTTPServer
}

func newProxyHTTPHandler(s ProxyHTTPServer) *ProxyHTTPHandler {
	return &ProxyHTTPHandler{srv: s}
}

func (h *ProxyHTTPHandler) Respond(req *go_restful.Request, resp *go_restful.Response) {
	defer req.Request.Body.Close()
	bytes, err := ioutil.ReadAll(req.Request.Body)
	if nil != err {
		resp.WriteErrorString(http.StatusBadRequest, err.Error())
		return
	}

	meta := make(map[string]string)
	for key, vals := range req.Request.Header {
		meta[strings.ToLower(key)] = vals[0]
	}

	ctx := transportHTTP.ContextWithHeader(req.Request.Context(), req.Request.Header)
	out, err := h.srv.Respond(ctx, &RespondRequest{Metadata: meta, Data: bytes})
	if err != nil {
		tErr := errors.FromError(err)
		httpCode := errors.GRPCToHTTPStatusCode(tErr.GRPCStatus().Code())
		resp.WriteErrorString(httpCode, tErr.Message)
		return
	}
	if reflect.ValueOf(out).Elem().Type().AssignableTo(reflect.TypeOf(emptypb.Empty{})) {
		resp.WriteHeader(http.StatusNoContent)
		return
	}
	result, err := json.Marshal(out)
	if err != nil {
		resp.WriteErrorString(http.StatusInternalServerError, err.Error())
		return
	}
	_, err = resp.Write(result)
	if err != nil {
		resp.WriteErrorString(http.StatusInternalServerError, err.Error())
		return
	}
}

func RegisterProxyHTTPServer(container *go_restful.Container, srv ProxyHTTPServer) {
	var ws *go_restful.WebService
	for _, v := range container.RegisteredWebServices() {
		if v.RootPath() == "/v1" {
			ws = v
			break
		}
	}
	if ws == nil {
		ws = new(go_restful.WebService)
		ws.ApiVersion("/v1")
		ws.Path("/v1").Produces(go_restful.MIME_JSON)
		container.Add(ws)
	}

	handler := newProxyHTTPHandler(srv)
	ws.Route(ws.POST("/respond").
		To(handler.Respond))
}
